{
  "name": "ApiTestCase",
  "tagline": "A PHPUnit Test Case that contains methods to help with testing APIs.",
  "body": "# Brunty\\ApiTestCase\r\n\r\n[![Build Status](https://travis-ci.org/Brunty/api-testcase.svg?branch=master)](https://travis-ci.org/Brunty/api-testcase) [![Coverage Status](https://coveralls.io/repos/github/Brunty/api-testcase/badge.svg?branch=master)](https://coveralls.io/github/Brunty/api-testcase?branch=master) [![SensioLabsInsight](https://insight.sensiolabs.com/projects/53748ffe-c2de-48f6-b0be-fffa9af7c39e/mini.png)](https://insight.sensiolabs.com/projects/53748ffe-c2de-48f6-b0be-fffa9af7c39e)\r\n\r\nJust some basic helper stuff to help test API endpoints.\r\n\r\n## Compatibility\r\n\r\n* PHP 5.6 and above\r\n* PHPUnit 5.7 and above\r\n* Guzzlehttp 6.2 and above\r\n\r\n## Installation\r\n\r\n`composer require brunty/api-testcase --dev`\r\n\r\n## Usage\r\n\r\nAdd an environment variable to your PHPUnit Configuration that's your API's base URL:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<phpunit>\r\n    <php>\r\n        <env name=\"api_base_url\" value=\"http://httpbin.org\"/>\r\n    </php>\r\n</phpunit>\r\n```\r\n\r\nExtend the `\\Brunty\\ApiTestCase` class. If you need to configure the client, call `$this->configureClientOptions($options);` before calling `parent::setUp()`:\r\n\r\n```php\r\n<?php\r\n\r\nuse Brunty\\ApiTestCase;\r\n\r\nclass BooksApiTest extends ApiTestCase\r\n{\r\n    public function setUp()\r\n    {\r\n        $options = [\r\n            // ...\r\n        ];\r\n        \r\n        // use this if you want to add additional options to the client when it's constructed\r\n        $this->configureClientOptions($options);\r\n        parent::setUp();\r\n    }\r\n}\r\n```\r\n\r\n## Methods and requests available\r\n\r\nThe test case uses [Guzzle](http://docs.guzzlephp.org/en/latest/index.html) (`\\GuzzleHttp\\Client`) under the surface, so requests are effectively just made through that. If you need to access the client, you can do so with `$this->client();` within your test class.\r\n\r\n### GET\r\n\r\n`get(string $path [, array $options])`\r\n\r\n```php\r\n<?php\r\n\r\nuse Brunty\\ApiTestCase;\r\n\r\nclass BooksApiTest extends ApiTestCase\r\n{\r\n    /**\r\n     * @test\r\n     */\r\n    public function the_api_retrieves_all_books()\r\n    {\r\n        $this->get('/books');\r\n        $this->assertResponseOk();\r\n    }\r\n}\r\n```\r\n\r\n### POST\r\n\r\n`post(string $path [, array $options])`\r\n\r\n```php\r\n<?php\r\n\r\nuse Brunty\\ApiTestCase;\r\n\r\nclass BooksApiTest extends ApiTestCase\r\n{\r\n    /**\r\n     * @test\r\n     */\r\n    public function the_api_creates_a_book()\r\n    {\r\n        $this->post('/books', ['title' => 'My Book']);\r\n        $this->assertResponseOk();\r\n    }\r\n}\r\n```\r\n\r\n### PATCH\r\n\r\n`patch(string $path [, array $options])`\r\n\r\n```php\r\n<?php\r\n\r\nuse Brunty\\ApiTestCase;\r\n\r\nclass BooksApiTest extends ApiTestCase\r\n{\r\n    /**\r\n     * @test\r\n     */\r\n    public function the_api_updates_a_book()\r\n    {\r\n        $this->patch('/books/1', ['title' => 'My Updated Book']);\r\n        $this->assertResponseOk();\r\n    }\r\n}\r\n```\r\n\r\n### PUT\r\n\r\n`put(string $path [, array $options])`\r\n\r\n```php\r\n<?php\r\n\r\nuse Brunty\\ApiTestCase;\r\n\r\nclass BooksApiTest extends ApiTestCase\r\n{\r\n    /**\r\n     * @test\r\n     */\r\n    public function the_api_creates_or_updates_a_book()\r\n    {\r\n        $this->put('/books', ['title' => 'My Updated Book']);\r\n        $this->assertResponseOk();\r\n    }\r\n}\r\n```\r\n\r\n### DELETE\r\n\r\n`delete(string $path [, array $options])`\r\n\r\n```php\r\n<?php\r\n\r\nuse Brunty\\ApiTestCase;\r\n\r\nclass BooksApiTest extends ApiTestCase\r\n{\r\n    /**\r\n     * @test\r\n     */\r\n    public function the_api_deletes_a_book()\r\n    {\r\n        $this->delete('/books/1');\r\n        $this->assertResponseOk();\r\n    }\r\n}\r\n```\r\n\r\n### Headers & Responses\r\n\r\n`getHeader(string $name)`\r\n\r\nReturns a response header matching the name.\r\n\r\n`response()`\r\n\r\nReturns the response object.\r\n\r\n`statusCode()`\r\n\r\nReturns the status code from the response.\r\n\r\n`rawResponseBody()`\r\n\r\nReturns the contents of the body of the response.\r\n\r\n`responseBody($asArray)`\r\n\r\nReturns the response body, parsed into either an array (if `$asArray` is true) or: `\\stdClass` if the response was JSON, `\\SimpleXmlElement` if the response was XML.\r\n\r\nIf the content type of the response cannot be determined to be either XML or JSON, a `\\Brunty\\ContentTypeNotFound` exception will be thrown.\r\n\r\n`getContentType()`\r\n\r\nReturns the value of the first `Content-Type` header element.\r\n\r\n`contentTypeIsXml()`\r\n\r\nReturns `true` if the content type is XML, `false` otherwise.\r\n\r\n`contentTypeIsJson()`\r\n\r\nReturns `true` if the content type is JSON, `false` otherwise.\r\n\r\nThe `\\Brunty\\Response` class contains a list of constants for all HTTP status codes - these can help make status code assertions more readable - for example:\r\n\r\n`$this->assertResponseStatus(\\Brunty\\Response::HTTP_NO_CONTENT);` as opposed to `$this->assertResponseStatus(204);`\r\n\r\n### Assertions\r\n\r\n* `assertResponseStatus($status)`\r\n* `assertResponseOk()` (Response code 200)\r\n* `assertResponseWasSuccess()` (200 <= Response Code < 300)\r\n* `assertResponseWasRedirect()` (300 <= Response Code < 400)\r\n  * Note that you may need to set the `allow_redirects` option to `false` otherwise status codes of the page after the redirect can be used. \r\n* `assertResponseWasClientError()` (400 <= Response Code < 500)\r\n* `assertResponseWasServerError()` (500 <= Response Code)\r\n* `assertResponseWasJson()`\r\n* `assertResponseWasXml()`\r\n* `assertResponseHasKey($key)`\r\n* `assertRedirectedTo($path)` Path can be absolute, or relative to the root `api_base_url`\r\n\r\n## Contributing\r\n\r\nAlthough this project is small, openness and inclusivity are taken seriously. To that end the following code of conduct has been adopted.\r\n\r\n[Contributor Code of Conduct](CONTRIBUTING.md)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}